name: Build Native Addon

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20, 22]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup MSBuild (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2
    
    - name: Install build tools (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Use GitHub Actions pre-installed Visual Studio
        $vsPath = "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise"
        if (-not (Test-Path $vsPath)) {
          $vsPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools"
        }
        
        if (Test-Path $vsPath) {
          Write-Host "Using pre-installed Visual Studio at: $vsPath"
        } else {
          Write-Host "Installing Visual Studio Build Tools..."
          # Install minimal required components
          choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --passive" --timeout 900
        }
        
        # Set npm configuration
        npm config set msvs_version 2022
        npm config set python python3
        
        # Verify tools are available
        try {
          where cl
          Write-Host "Build tools verification successful"
        } catch {
          Write-Host "Warning: cl.exe not found in PATH"
        }
    
    - name: Install build tools (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Build native addon (Unix)
      if: runner.os != 'Windows'
      run: |
        # First attempt
        if ! npm run build; then
          echo "First build attempt failed, cleaning and retrying..."
          # Clean build directory
          rm -rf build node_modules/.cache
          # Reinstall dependencies
          npm ci
          # Retry build
          npm run build
        fi
    
    - name: Build native addon (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # First attempt
        try {
          npm run build
          Write-Host "Build successful on first attempt"
        } catch {
          Write-Host "First build attempt failed, cleaning and retrying..."
          # Clean build directory
          if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
          if (Test-Path "node_modules\.cache") { Remove-Item -Recurse -Force "node_modules\.cache" }
          # Reinstall dependencies
          npm ci
          # Retry build
          npm run build
        }
    
    - name: Test addon (Unix)
      if: runner.os != 'Windows'
      run: |
        # Check if addon was built successfully
        if [ -f "build/Release/addon.node" ]; then
          echo "Addon built successfully, running tests..."
          npm test
        else
          echo "Warning: addon.node not found, skipping tests"
          ls -la build/Release/ || echo "build/Release directory not found"
          exit 1
        fi
    
    - name: Test addon (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Check if addon was built successfully
        if (Test-Path "build\Release\addon.node") {
          Write-Host "Addon built successfully, running tests..."
          npm test
        } else {
          Write-Host "Warning: addon.node not found, skipping tests"
          if (Test-Path "build\Release") {
            Get-ChildItem "build\Release" -Force
          } else {
            Write-Host "build/Release directory not found"
          }
          exit 1
        }
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: addon-${{ matrix.os }}-node${{ matrix.node-version }}
        path: |
          build/Release/*.node
          build/Release/*.dll
          build/Release/*.so
          build/Release/*.dylib
        retention-days: 30

  release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create release archive
      run: |
        cd artifacts
        for dir in */; do
          cd "$dir"
          zip -r "../$(basename "$dir").zip" .
          cd ..
        done
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/*.zip
      env:
        token: ${{ secrets.GITHUB_TOKEN }}